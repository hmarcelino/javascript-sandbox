package com.huma.adventofcode

import kotlin.test.assertEquals

fun calculateSumWithCustomStep(text: String, step: Int): Int {

    val maxIdx = text.length - 1

    val list = text.mapIndexed { idx, c -> Pair(c, text.get(if (idx + step <= maxIdx) idx + step else ((idx + step - text.length)))) }
            .filter { it.first == it.second }
            .map { it.first.toString().toInt() }

    return if (list.isNotEmpty()) list.reduce { a, b -> a + b } else 0
}


fun main(args: Array<String>) {

    val firstPartNumber = "649713959682898259577777982349515784822684939966191359164369933435366431847754488661965363557985166219" +
            "35871473931837138238829615119536157121613192515849244146184468732492331538135833157157761378964916648615223" +
            "79459179879777938917398651497347559932413618863369265384822711247553595727914513358425348931926935586599911" +
            "71983849285489139421425933638614884415896938914992732492192458636484523228244532331587584779552788544667253577" +
            "3246499152741159246117583456761834439829927339663734983856859657689292414779837279212798267279768725563154" +
            "28434799161759734932659829934562339385328119656823483954856427365892627728163524721467938449943358192632262" +
            "35485459363583155935224744397594514416318356372356289135785936796412628944598213552353592311358931641762348" +
            "36316375692919417829922138895137145253424685633493852718842216855499965343337657312438956626248299249829716" +
            "8544382536682792358943525451421148964948237487643454968278545969888552167325893941325515819652569623645791" +
            "14475999474496655425542514868473888235769371672374765567821332272793245268349465344447181615241292859194779" +
            "5993768472888259277994173418614413888399432274248485392538351865168714724694342131128732486766369843254661" +
            "95836389766377333452518348699857463853716177434986271114419335463569346716395453425153925365747447957322436" +
            "17113574641284231928489312683617154536648219244996491745718658151648246791826466973654765284263928884137863" +
            "64762323734588246914293314263758364425842741697259524173725444971853172417653864836925379668893124519138295" +
            "69615447758568722813177438285526298435518449279131475183773622665543343867213132442232333964532912249324992" +
            "77961525785755863852487141946626663835195286762947172384186667439516367219391823774338692151926472717373235" +
            "61291184877338777124414496914948247751943782286342266215746196844428197235314969551549499253792749211138819" +
            "38375538446717192914824423377613212723339829242893234372772245651499284162554358413277561391181197445289932" +
            "69157174414264387573331116323982614862952264597611885999285995516357519648695594299657387614793341626318866" +
            "519144574571816535351149394735916975448425618171572917195165594323552199346814729617189679698944337146"


    assertEquals(0, calculateSumWithCustomStep("1234", 1))
    assertEquals(9, calculateSumWithCustomStep("91212129", 1))

    // Solution to first part of problem 1
    assertEquals(1228, calculateSumWithCustomStep(firstPartNumber, 1))

    val secondPartNumber = "64971395968289825957777798234951578482268493996619135916436993343536643184775448866196536355" +
            "79851662193587147393183713823882961511953615712161319251584924414618446873249233153813583315715776137896491" +
            "66486152237945917987977793891739865149734755993241361886336926538482271124755359572791451335842534893192693" +
            "55865999117198384928548913942142593363861488441589693891499273249219245863648452322824453233158758477955278" +
            "85446672535773246499152741159246117583456761834439829927339663734983856859657689292414779837279212798267279" +
            "76872556315428434799161759734932659829934562339385328119656823483954856427365892627728163524721467938449943" +
            "35819263226235485459363583155935224744397594514416318356372356289135785936796412628944598213552353592311358" +
            "93164176234836316375692919417829922138895137145253424685633493852718842216855499965343337657312438956626248" +
            "29924982971685443825366827923589435254514211489649482374876434549682785459698885521673258939413255158196525" +
            "69623645791144759994744966554255425148684738882357693716723747655678213322727932452683494653444471816152412" +
            "92859194779599376847288825927799417341861441388839943227424848539253835186516871472469434213112873248676636" +
            "98432546619583638976637733345251834869985746385371617743498627111441933546356934671639545342515392536574744" +
            "79573224361711357464128423192848931268361715453664821924499649174571865815164824679182646697365476528426392" +
            "88841378636476232373458824691429331426375836442584274169725952417372544497185317241765386483692537966889312" +
            "45191382956961544775856872281317743828552629843551844927913147518377362266554334386721313244223233396453291" +
            "22493249927796152578575586385248714194662666383519528676294717238418666743951636721939182377433869215192647" +
            "27173732356129118487733877712441449691494824775194378228634226621574619684442819723531496955154949925379274" +
            "92111388193837553844671719291482442337761321272333982924289323437277224565149928416255435841327756139118119" +
            "74452899326915717441426438757333111632398261486295226459761188599928599551635751964869559429965738761479334" +
            "1626318866519144574571816535351149394735916975448425618171572917195165594323552199346814729617189679698944337146"


    assertEquals(6, calculateSumWithCustomStep("1212", 2))
    assertEquals(0, calculateSumWithCustomStep("1221", 2))
    assertEquals(4, calculateSumWithCustomStep("123425", 3))
    assertEquals(12, calculateSumWithCustomStep("123123", 3))
    assertEquals(4, calculateSumWithCustomStep("12131415", 4))

    println(calculateSumWithCustomStep(secondPartNumber, secondPartNumber.length / 2))

}

